# Red Hat Developer Hub (Backstage) Configuration

# Operator installation
operator:
  enabled: true
  channel: fast
  namespace: openshift-operators
  installPlanApproval: Automatic

# Helpers integration for operator installation
helpers:
  # Helper Operator para instalar RHDH operator
  operator:
    enabled: true
    operators:
      rhdh-operator:
        enabled: true
        syncwave: 0
        namespace:
          name: openshift-operators
        subscription:
          channel: fast
          operatorName: rhdh
          source: redhat-operators

  # Status Checker para health monitoring del operador
  statusChecker:
    enabled: true
    statusChecks:
      checks:
        rhdh-operator:
          enabled: true
          type: deployment
          namespace: openshift-operators
          name: rhdh-operator

# Backstage Instance Configuration
backstage:
  # Namespace configuration  
  namespace:
    create: false  # Use release namespace
    name: ""       # Will use .Release.Namespace

  # Backstage instance creation
  instance:
    enabled: true
    name: rhdh-backstage

  # Number of replicas
  replicas: 1

  # Route configuration
  route:
    enabled: true
    # host: developer-hub.apps.cluster.example.com  # Optional: specify custom host
    tls:
      enabled: true
      termination: edge

  # Database configuration
  database:
    # Use local database (PostgreSQL in pod)
    enableLocalDb: true
    # For external database, set enableLocalDb: false and provide:
    # authSecretName: rhdh-postgres-secret

  # Application configuration
  appConfig:
    enabled: true
    configMapName: rhdh-app-config
    app:
      title: Red Hat Developer Hub
      baseUrl: https://rhdh-backstage.apps.cluster.example.com
    backend:
      baseUrl: https://rhdh-backstage.apps.cluster.example.com
      cors:
        origin: https://rhdh-backstage.apps.cluster.example.com
      auth: true
    # GitHub Integration
    integrations:
      github:
        - host: github.com
          token: ${GITHUB_TOKEN}
    # Catalog configuration
    catalog:
      import:
        entityFilename: catalog-info.yaml
      rules:
        - allow: [Component, System, API, Resource, Location, Template]
      locations:
        # Example catalog locations
        - type: url
          target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml
    # Kubernetes plugin configuration
    kubernetes:
      serviceLocatorMethod:
        type: multiTenant
      clusterLocatorMethods:
        - type: config
          clusters:
            - name: local
              url: https://kubernetes.default.svc
              authProvider: serviceAccount
              skipTLSVerify: false
              skipMetricsLookup: false
    # TechDocs configuration
    techdocs:
      builder: local
      generator:
        runIn: local
      publisher:
        type: local
    # ArgoCD plugin configuration
    argocd:
      appLocatorMethods:
        - type: config
          instances:
            - name: argocd
              url: https://argocd-server.argocd.svc
              username: ${ARGOCD_USERNAME}
              password: ${ARGOCD_PASSWORD}

  # Dynamic Plugins Configuration
  dynamicPlugins:
    enabled: true
    configMapName: dynamic-plugins-rhdh
    plugins:
      # GitHub plugin
      - package: './dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic'
        disabled: false
        pluginConfig:
          catalog:
            providers:
              github:
                organization: "${GITHUB_ORG}"
                schedule:
                  frequency:
                    minutes: 30
                  timeout:
                    minutes: 3
                  initialDelay:
                    seconds: 100

      # Kubernetes plugin
      - package: './dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic'
        disabled: false

      # ArgoCD plugin
      - package: './dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic'
        disabled: false

      # Jira plugin
      - package: './dynamic-plugins/dist/roadiehq-backstage-plugin-jira-dynamic'
        disabled: true  # Enable if Jira is configured
        pluginConfig:
          jira:
            host: "${JIRA_URL}"
            token: "${JIRA_TOKEN}"

      # SonarQube plugin
      - package: './dynamic-plugins/dist/backstage-plugin-sonarqube-backend-dynamic'
        disabled: true  # Enable if SonarQube is configured
        pluginConfig:
          sonarqube:
            baseUrl: "${SONARQUBE_URL}"
            apiKey: "${SONARQUBE_TOKEN}"

      # PagerDuty plugin
      - package: './dynamic-plugins/dist/backstage-plugin-pagerduty-dynamic'
        disabled: true  # Enable if PagerDuty is configured

      # Jenkins plugin
      - package: './dynamic-plugins/dist/backstage-plugin-jenkins-backend-dynamic'
        disabled: true  # Enable if Jenkins is configured
        pluginConfig:
          jenkins:
            baseUrl: "${JENKINS_URL}"
            username: "${JENKINS_USERNAME}"
            apiKey: "${JENKINS_API_KEY}"

      # TechDocs plugin
      - package: './dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic'
        disabled: false

      # GitHub Actions plugin
      - package: './dynamic-plugins/dist/backstage-plugin-github-actions-dynamic'
        disabled: true  # Plugin not available in this image version

      # GitLab plugin
      - package: './dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic'
        disabled: true  # Enable if GitLab is configured
        pluginConfig:
          integrations:
            gitlab:
              - host: "${GITLAB_HOST}"
                token: "${GITLAB_TOKEN}"
                apiBaseUrl: "${GITLAB_API_URL}"

      # Prometheus plugin
      - package: './dynamic-plugins/dist/roadiehq-backstage-plugin-prometheus-dynamic'
        disabled: true  # Enable if Prometheus is configured
        pluginConfig:
          prometheus:
            proxyPath: /prometheus/api
            uiUrl: "${PROMETHEUS_URL}"

  # Secrets configuration
  secrets:
    create: true
    backendSecret: "default-backend-secret-change-me"
    github:
      token: "ghp_placeholder_token"
      org: "example-org"
    argocd:
      username: "admin"
      password: "placeholder-password"
    additional: {}
      # JIRA_TOKEN: "your-jira-token"
      # SONARQUBE_TOKEN: "your-sonar-token"

  # Environment variables from secrets
  extraEnvs:
    secrets:
      - rhdh-secrets

  # Extra files
  extraFiles:
    enabled: false
    mountPath: /opt/app-root/src

# Advanced Configuration
advanced:
  # Resource limits
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1000m"

  # Node selector
  nodeSelector: {}

  # Tolerations
  tolerations: []

  # Affinity rules
  affinity: {}