apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  labels:
    {{- include "setup-platform-bookstack.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "setup-platform-bookstack.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "setup-platform-bookstack.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "setup-platform-bookstack.serviceAccountName" . }}
      {{- if .Values.documentation.enabled }}
      initContainers:
        {{- range $name, $repo := .Values.documentation.gitSync.repositories }}
        {{- if $repo.enabled }}
        - name: git-sync-{{ $name }}
          image: {{ $.Values.documentation.gitSync.image }}
          imagePullPolicy: {{ $.Values.documentation.gitSync.pullPolicy }}
          env:
            - name: GIT_SYNC_REPO
              value: {{ $repo.url | quote }}
            - name: GIT_SYNC_BRANCH
              value: {{ $repo.branch | quote }}
            - name: GIT_SYNC_ROOT
              value: {{ $repo.mountPath | quote }}
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            {{- if $repo.secret }}
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $repo.secret }}
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $repo.secret }}
                  key: password
            {{- end }}
          volumeMounts:
            - name: docs-{{ $name }}
              mountPath: {{ $repo.mountPath }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ALL]
            runAsNonRoot: true
        {{- end }}
        {{- end }}
      {{- end }}
      containers:
        - name: bookstack
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            # Database configuration
            - name: DB_HOST
              value: {{ .Release.Name }}-mariadb.{{ .Release.Namespace }}.svc.cluster.local
            - name: DB_PORT
              value: "3306"
            - name: DB_DATABASE
              value: {{ .Values.mariadb.auth.database | default "bookstack" }}
            - name: DB_USERNAME
              value: {{ .Values.mariadb.auth.username | default "bookstack" }}
            - name: DB_PASSWORD
              value: {{ .Values.mariadb.auth.password | default "bookstack" }}
            - name: DB_CONNECTION
              value: "mysql"
            
            # Application configuration
            - name: APP_URL
              value: {{ .Values.config.appUrl | default (printf "https://%s" (.Values.route.host | default "bookstack.local")) }}
            - name: APP_KEY
              value: "base64:{{ randAlphaNum 32 | b64enc }}"
            - name: APP_DEBUG
              value: "false"
            - name: APP_ENV
              value: "production"
            
            # LDAP/Auth configuration (disabled by default)
            - name: AUTH_METHOD
              value: "standard"
            - name: LDAP_SERVER
              value: ""
            
            # Storage configuration
            - name: STORAGE_TYPE
              value: "local"
            - name: STORAGE_UPLOADS
              value: "/var/www/bookstack/storage/uploads"
            
            # Mail configuration
            {{- if .Values.config.mail.enabled }}
            - name: MAIL_DRIVER
              value: {{ .Values.config.mail.driver | quote }}
            - name: MAIL_HOST
              value: {{ .Values.config.mail.host | quote }}
            - name: MAIL_PORT
              value: {{ .Values.config.mail.port | quote }}
            - name: MAIL_ENCRYPTION
              value: {{ .Values.config.mail.encryption | quote }}
            {{- if .Values.config.mail.username }}
            - name: MAIL_USERNAME
              value: {{ .Values.config.mail.username | quote }}
            {{- end }}
            {{- if .Values.config.mail.password }}
            - name: MAIL_PASSWORD
              value: {{ .Values.config.mail.password | quote }}
            {{- end }}
            {{- if .Values.config.mail.fromAddress }}
            - name: MAIL_FROM_ADDR
              value: {{ .Values.config.mail.fromAddress | quote }}
            {{- end }}
            {{- if .Values.config.mail.fromName }}
            - name: MAIL_FROM_NAME
              value: {{ .Values.config.mail.fromName | quote }}
            {{- end }}
            {{- else }}
            - name: MAIL_DRIVER
              value: ""
            {{- end }}
            
            # Cache configuration
            - name: CACHE_DRIVER
              value: "file"
            - name: SESSION_DRIVER
              value: "file"
            
            {{- if .Values.documentation.enabled }}
            # Documentation Git Sync paths
            {{- range $name, $repo := .Values.documentation.gitSync.repositories }}
            {{- if $repo.enabled }}
            - name: DOCS_{{ $name | upper }}_PATH
              value: {{ $repo.mountPath }}/repo
            {{- end }}
            {{- end }}
            - name: DOCS_GIT_ENABLED
              value: "true"
            {{- else }}
            - name: DOCS_GIT_ENABLED
              value: "false"
            {{- end }}
            
          volumeMounts:
            - name: uploads
              mountPath: /var/www/bookstack/storage/uploads
            - name: storage
              mountPath: /var/www/bookstack/storage
            {{- if .Values.documentation.enabled }}
            {{- range $name, $repo := .Values.documentation.gitSync.repositories }}
            {{- if $repo.enabled }}
            - name: docs-{{ $name }}
              mountPath: {{ $repo.mountPath }}
              readOnly: true
            {{- end }}
            {{- end }}
            {{- end }}
        
        {{- if .Values.documentation.enabled }}
        # Git Sync sidecar containers for continuous synchronization
        {{- range $name, $repo := .Values.documentation.gitSync.repositories }}
        {{- if $repo.enabled }}
        - name: git-sync-{{ $name }}-sidecar
          image: {{ $.Values.documentation.gitSync.image }}
          imagePullPolicy: {{ $.Values.documentation.gitSync.pullPolicy }}
          env:
            - name: GIT_SYNC_REPO
              value: {{ $repo.url | quote }}
            - name: GIT_SYNC_BRANCH
              value: {{ $repo.branch | quote }}
            - name: GIT_SYNC_ROOT
              value: {{ $repo.mountPath | quote }}
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_WAIT
              value: {{ $repo.interval | quote }}
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "10"
            {{- if $repo.secret }}
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $repo.secret }}
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $repo.secret }}
                  key: password
            {{- end }}
          volumeMounts:
            - name: docs-{{ $name }}
              mountPath: {{ $repo.mountPath }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ALL]
            runAsNonRoot: true
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 128Mi
        {{- end }}
        {{- end }}
        {{- end }}
      volumes:
        - name: uploads
          {{- if .Values.persistence.uploads.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Chart.Name }}-uploads
          {{- else }}
          emptyDir:
            sizeLimit: 5Gi
          {{- end }}
        - name: storage
          {{- if .Values.persistence.storage.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Chart.Name }}-storage
          {{- else }}
          emptyDir:
            sizeLimit: 2Gi
          {{- end }}
        {{- if .Values.documentation.enabled }}
        {{- range $name, $repo := .Values.documentation.gitSync.repositories }}
        {{- if $repo.enabled }}
        - name: docs-{{ $name }}
          {{- if $.Values.documentation.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "setup-platform-bookstack.fullname" $ }}-docs
          {{- else }}
          emptyDir:
            sizeLimit: 1Gi
          {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}